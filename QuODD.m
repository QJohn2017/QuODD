(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["QuODD`",{"EPToolbox`","ARMSupport`"}]


$HistoryLength=5;


dashboardPlotter::usage="dynamicDashboardPlotter[{F, \[Omega]}, \[Kappa]] plots a dashboard for field amplitude F at frequency \[Omega], for ionization potential \!\(\*SuperscriptBox[\(\[Kappa]\), \(2\)]\)/2.
  
dynamicDashboardPlotter[{F, \[Omega]}, \[Kappa], path] institutes the desired path, where the strings \"t\[Kappa]\", \"ts\", \"t0\" and \"\[Tau]\" will be replaced by the corresponding functions of momentum, and \"T\" is a laser period. Default is {\"t\[Kappa]\", \"t0\", \"T\"}.
  
dynamicDashboardPlotter[{F, \[Omega]}, \[Kappa], path, {poinit, ppinit}] specifies initial values of poinit and pp init for \!\(\*SubscriptBox[\(p\), \(\[UpTee]\)]\) and \!\(\*SubscriptBox[\(p\), \(\[DoubleVerticalBar]\)]\).";


$dashboardMainSize::usage="$dashboardMainSize is a global which specifies the {width, height} pair for the lower two rows of the dashboard.";
$smallBlockSize::usage="$smallBlockSize is a global option which specifies the {width, height} pair for small blocks on the Dashboard.";
$largeBlockSize::usage="$smallBlockSize is a global option which specifies the {width, height} pair for large blocks on the Dashboard.";


timeContours::usage="";


timeIntegrandPlotter::usage="";


timePathPlotter::usage="";


(* ::Input::Italic:: *)
trajectoryPlotter::usage="";


ionizationProbabilityColorFunction::usage="";
ionizationProbabilityPlot::usage="";
colourScale::usage="";
momentumPlaneControls::usage="";


tsController::usage="";


contourProgressController::usage="";


rangeReset::usage="";


rInitController::usage="";


statifyDashboard::usage="statifyDashboard[dashboard] Removes the locator panes from a dashboard.."


Begin["`Private`"];


statifyDashboard[dashboard_]:=Quiet[
dashboard/.{LocatorPane->locatorpane}/.{locatorpane[points_,contents_]->contents}
(*/.{
LocatorPane[points_,background_]\[Rule]background,DynamicModule\[Rule]placeholder
}/.{
placeholder[{init__},contents_,packages_,DynamicModuleValues\[RuleDelayed]{values___},options___]\[RuleDelayed]Module[{init},contents]
}*)
]


$dashboardMainSize=Which[
SystemInformation["Kernel","OperatingSystem"]=="Windows",
{0.82,0.7}*First[MaximalBy[
{#[[1,2]],#[[2,2]]}&/@("ScreenArea"/.SystemInformation["Devices","ScreenInformation"])
,First[#]Last[#]&]]
,True
,{1050,532}];
$smallBlockSize={0.25,0.5}*$dashboardMainSize;
$largeBlockSize={0.5,0.5}*$dashboardMainSize;


Options[timeContours]={ImageSize->$smallBlockSize};
timeContours[r2function_,rules_,tss_,path_,tRangeNumeric_,OptionsPattern[]]:=Show[{
RegionPlot[
Tooltip[Re[r2function[ret+I imt]]<0,DisplayForm[Row[{"Re(",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")<0"}]]]
,{ret,tRangeNumeric[[1,1]],tRangeNumeric[[1,2]]},{imt,tRangeNumeric[[2,1]],tRangeNumeric[[2,2]]}
,AspectRatio->Automatic,AxesOrigin->{0,0},PlotRangePadding->0
,FrameLabel->{"Re(t)","Im(t)"}
,PlotLabel->"time contour"
,PlotStyle->GrayLevel[0.8]
,ImageSize->OptionValue[ImageSize]
],
Sequence@@Table[
ContourPlot[
Im[r2function[ret+I imt]]==0
,{ret,tRangeNumeric[[1,1]],tRangeNumeric[[1,2]]},{imt,tRangeNumeric[[2,1]],tRangeNumeric[[2,2]]}
,AspectRatio->Automatic,AxesOrigin->{0,0},PlotRangePadding->0
,ContourStyle->{Thick,selector/.{Less->Red,Greater->RGBColor[0,0.6,0]}}
,ContourLabels->{None,Tooltip[Null,
selector/.{Less->DisplayForm[Row[{"Branch cut.\nIm(",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")=0,\nRe(",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")<0"}]],Greater->DisplayForm[Row[{"Im(",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")=0,\nRe(",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")>0"}]]}
]&}
,RegionFunction->Function[{ret,imt},selector[Re[r2function[ret+I imt]],0]]
]
,{selector,{Greater,Less}}
]
}]


Options[timePathPlotter]={ImageSize->$smallBlockSize};
timePathPlotter[rules_,t_,sman_,OptionsPattern[]]:=Show[Join[{
ParametricPlot[
{Re[t[s]],Im[t[s]]}
,{s,0,1}
,Frame->True,Axes->False,AxesOrigin->{0,0}
,PlotRangePadding->2
]
,Graphics[{PointSize[Large],Purple,Tooltip[Point[{Re[#],Im[#]}&@Evaluate["ts"/.rules]],"\!\(\*SubscriptBox[\(t\), \(s\)]\)"]}]
,Graphics[{PointSize[Large],Gray,Tooltip[Point[{Re[#],Im[#]}&@Evaluate["t\[Kappa]"/.rules]],"\!\(\*SubscriptBox[\(t\), \(\[Kappa]\)]\)"]}]
,Graphics[{PointSize[Large],Green,Tooltip[Point[{Re[t[0]],Im[t[0]]}(*/.s\[Rule]0*)],"Contour start"]}]
,Graphics[{PointSize[Large],Red,Tooltip[Point[{Re[t[1]],Im[t[1]]}(*/.s\[Rule]1*)],"Contour end"]}]
,Graphics[{PointSize[Large],Blue,Tooltip[Point[{0,0}],"Time origin"]}]
,Graphics[{PointSize[Large],Black,Tooltip[Point[{Re[t[sman]],Im[t[sman]]}],"t(s)"]}]
},
Graphics[{PointSize[Large],GrayLevel[0.7],Tooltip[Point[{Re[#],Im[#]}],"\!\(\*SubscriptBox[\(t\), \(CA\)]\)"]}]&/@("tCAset"/.rules)
]]


Options[trajectoryPlotter]={"PlotRange"->All,ImageSize->$smallBlockSize};
trajectoryPlotter[trajectoryFunction_,label_,sman_,OptionsPattern[]]:=
Show[#,ImageSize->OptionValue[ImageSize],PlotRange->OptionValue["PlotRange"],PlotRangePadding->0.05Max[(#[[2]]-#[[1]]&)/@(PlotRange/. AbsoluteOptions[#,PlotRange])]]&@(*For better padding, as per mm.se:42495.*)
Show[{
ParametricPlot[
{Re[trajectoryFunction[s]],Im[trajectoryFunction[s]]},{s,0,1}
,AspectRatio->Automatic
,PlotRange->Full
,ImageSize->OptionValue[ImageSize]
,Frame->True
,Axes->False
,AxesOrigin->{0,0}
,FrameLabel->{"Re("<>label<>")","Im("<>label<>")"}
,PlotLabel->label
,Evaluate@If[label=="\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t\!\(\*SuperscriptBox[\()\), \(2\)]\)",Prolog->{
GrayLevel[0.8],Tooltip[Rectangle[{-1000,-1000},{0,1000}],DisplayForm[Row[{"Re(",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")<0"}]]],
Red,Thick,Tooltip[Line[{{-1000,0},{0,0}}],DisplayForm[Row[{"Branch cut\n",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")<0"}]]],
Darker[Green],Thick,Tooltip[Line[{{0,0},{1000000,0}}],DisplayForm[Row[{"Real axis\n",Superscript["\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t)","2"],")>0"}]]]
},##&[]
]
]
,Graphics[{PointSize[Large],Green,Tooltip[Point[{Re[trajectoryFunction[0]],Im[trajectoryFunction[0]]}],"Contour start"]}]
,Graphics[{PointSize[Large],Red,Tooltip[Point[{Re[trajectoryFunction[1]],Im[trajectoryFunction[1]]}],"Contour end"]}]
,Graphics[{PointSize[Large],Blue,Tooltip[Point[{0,0}],"Origin"]}]
,Graphics[{PointSize[Large],Black,Tooltip[Point[{Re[trajectoryFunction[sman]],Im[trajectoryFunction[sman]]}],label]}]
}]


Options[timeIntegrandPlotter]={ImageSize->$smallBlockSize};
timeIntegrandPlotter[rer2function_,t_,OptionsPattern[]]:=ParametricPlot[{
Tooltip[{s,Re[-(rer2function[s])^(-1/2)D[t[ss],ss]/.{ss->s}]},"Re"],
Tooltip[{s,Im[-(rer2function[s])^(-1/2)D[t[ss],ss]/.{ss->s}]},"Im"],
Tooltip[{s,Abs[-(rer2function[s])^(-1/2)D[t[ss],ss]/.{ss->s}]},"Abs"]
},{s,0,1}
,PlotRange->{{0,1},Full}
,AspectRatio->1/3
,Frame->True
,AxesStyle->Gray
,FrameLabel->{Style["\!\(TraditionalForm\`s\)",Larger],""}
,PlotLabel->"Re, Im and Abs of \!\(\*FractionBox[\(-1\), SqrtBox[\(\*SubscriptBox[\(r\), \(cl\)] \*SuperscriptBox[\((t)\), \(2\)]\)]]\)\!\(\*FractionBox[\(dt\), \(ds\)]\) over the contour"
,ImageSize->OptionValue[ImageSize]
]


ionizationProbabilityColorFunction=(Blend[{RGBColor[0.4,0,0],Red,Orange,Yellow},#]&);


Options[colourScale]={ImageSize->{70,0.55$smallBlockSize[[2]]}}
colourScale[{pomax_,ppmax_},{F_,\[Omega]_},\[Kappa]_,opts:OptionsPattern[]]:=(*colourScale[{pomax,0,ppmax},{F,\[Omega]},\[Kappa],opts]=*)ContourPlot[
y,{x,0,0.075},{y,0,1}
,AspectRatio->Automatic
,Contours->10^Range[Floor[Log[10,E^(2volkovExponent[{pomax,0,ppmax},{F,\[Omega],\[Kappa]}])/E^(2volkovExponent[{0,0,0},{F,\[Omega],\[Kappa]}])]],-0,0.1]
,PlotRangePadding->None
,FrameTicks->{{None,{10^Range[-1,0,0.1],ToString[#,TraditionalForm]&/@Evaluate[10^ToString/@Range[-1,0,0.1]/.{
\!\(\*SuperscriptBox[\(10\), \("\<0.\>"\)]\)->1}]}\[Transpose]},{None,None}}
,ContourLabels->None
,ColorFunction->ionizationProbabilityColorFunction
,ImageSize->OptionValue[ImageSize]
]


ClearAll[ionizationProbabilityPlot]
Options[ionizationProbabilityPlot]={ImageSize->{{0.95$smallBlockSize[[1]]},{$smallBlockSize[[2]]}}}
ionizationProbabilityPlot[{F_,\[Omega]_,\[Kappa]_},{pomax_,ppmax_},opts:OptionsPattern[]]:=ionizationProbabilityPlot[{F,\[Omega],\[Kappa]},{pomax,ppmax},opts]=Block[{},
Show[
cleanContourPlot[ContourPlot[
E^(2volkovExponent[{ppo,0,ppp},{F,\[Omega],\[Kappa]}])/E^(2volkovExponent[{0,0,0},{F,\[Omega],\[Kappa]}])
,{ppo,0,pomax},{ppp,0,ppmax}
,PlotRange->Full
,Contours->10^Range[-2,0,0.1]
,ColorFunction->ionizationProbabilityColorFunction
,ContourStyle->None
,PlotPoints->20
,AspectRatio->Automatic
,PlotRangePadding->None
(*,ImageSize\[Rule]{{340},{360}}*)
,ImageSize->OptionValue[ImageSize]
]],
ContourPlot[
E^(2volkovExponent[{ppo,0,ppp},{F,\[Omega],\[Kappa]}])/E^(2volkovExponent[{0,0,0},{F,\[Omega],\[Kappa]}])
,{ppo,0,pomax},{ppp,0,ppmax}
,PlotRange->Full
,Contours->10^Range[-2,0,0.1]
,ContourShading->None
,ContourStyle->{{Thickness[0.003],Black}}
,PlotPoints->20
],
(ContourPlot[
E^(2volkovExponent[{ppo,0,ppp},{F,\[Omega],\[Kappa]}])/E^(2volkovExponent[{0,0,0},{F,\[Omega],\[Kappa]}])
,{ppo,0,pomax},{ppp,0,ppmax}
,PlotRange->Full
,Contours->10^Range[Floor[Log[10,E^(2volkovExponent[{pomax,0,ppmax},{F,\[Omega],\[Kappa]}])/E^(2volkovExponent[{0,0,0},{F,\[Omega],\[Kappa]}])]],-0,1]
,ContourShading->None
,ContourStyle->{Black}
,PlotPoints->20
]/.{
Tooltip[expr_,tooltip_]:>Tooltip[expr,DisplayForm[SuperscriptBox[10,Log[10,tooltip]]]]
})
]
]


SetAttributes[rangeReset,HoldFirst]
rangeReset[range_,{label1_,label2_}]:=Row[{
Grid[{
{InputField[Dynamic[range[[1,1]]],FieldSize->3],"\[LessEqual]"<>label1<>"\[LessEqual]",InputField[Dynamic[range[[1,2]]],FieldSize->3]},
{InputField[Dynamic[range[[2,1]]],FieldSize->3],"\[LessEqual]"<>label2<>"\[LessEqual]",InputField[Dynamic[range[[2,2]]],FieldSize->3]}
}],
"  ",
Button["Reset",range={{All,All},{All,All}},ImageSize->Medium]
}]


SetAttributes[momentumPlaneControls,HoldAll];
momentumPlaneControls[{po_,py_,pp_},{F_,\[Omega]_,\[Kappa]_},{pomax_,ppmax_}]:=Grid[{
{Dynamic[Text[
"Probability = "<>(If[#<=10^-2,
ToString[ScientificForm[#,2],TraditionalForm],
ToString[NumberForm[#,2]]
]&[E^(2volkovExponent[{po,py,pp},{F,\[Omega],\[Kappa]}])/E^(2volkovExponent[{0,0,0},{F,\[Omega],\[Kappa]}])])
]]},
{
LocatorPane[
Dynamic[
{Abs[po],Abs[pp]},
((po=If[po!=0,Sign[po]#[[1]],#[[1]]]);(pp=If[pp!=0,Sign[pp]#[[2]],#[[2]]]);updateDefinitions[])&
],
ionizationProbabilityPlot[{F,\[Omega],\[Kappa]},{pomax,ppmax},ImageSize->{$smallBlockSize[[1]]-70,$smallBlockSize[[2]]}]
],
colourScale[{pomax,ppmax},{F,\[Omega]},\[Kappa],ImageSize->{70,0.55$smallBlockSize[[2]]}]
}
,{Row[{Text["\!\(\*SubscriptBox[\(p\), \(\[Perpendicular]\)]\)="],Button[Dynamic[po/.{a_/;(a>=0)->"+",a_/;(a<0)->"-"}],po=-po],InputField[Dynamic[Abs[po],(po=If[po!=0,Sign[po]#,#])&],FieldSize->3],Text[" \!\(\*SubscriptBox[\(p\), \(\[DoubleVerticalBar]\)]\)="],Button[Dynamic[pp/.{a_/;(a>=0)->"+",a_/;(a<0)->"-"}],pp=-pp],InputField[Dynamic[Abs[pp],(pp=If[pp!=0,Sign[pp]#,#])&],FieldSize->3]}]
}}]


SetAttributes[contourProgressController,HoldAll];
contourProgressController[sMan_]:=Row[{Text["Contour progress: "],Manipulator[Dynamic[sMan],ImageSize->0.5First[$smallBlockSize],Appearance->{"Labeled"}]}]


SetAttributes[tsController,HoldAll];
tsController[\[CapitalDelta]tss_,baretss_,tss_,{F_,\[Omega]_,\[Kappa]_}]:=Row[{Text["\!\(\*SubscriptBox[\(t\), \(s\)]\)="],
InputField[
Dynamic[tss,Function[input,(\[CapitalDelta]tss=Evaluate[input/.{"t\[Kappa]"->baretss-I/\[Kappa]^2,"ts"->baretss,"t0"->Re[baretss],"\[Tau]"->Im[baretss],"T"->2\[Pi]/\[Omega]}]-baretss),HoldRest]],
FieldSize->12]
,Button["\!\(\*SubscriptBox[\(t\), \(s\)]\)",\[CapitalDelta]tss=0],Button["\!\(\*SubscriptBox[\(t\), \(0\)]\)",\[CapitalDelta]tss=-I Im[baretss]]
}]


SetAttributes[rInitController,HoldAll];
rInitController[xinit_,zinit_,rInitRange_]:=Grid[{
{Text["\!\(\*SubscriptBox[\(x\), \(init\)]\) "],Button[Dynamic[xinit/.{a_/;(a>=0)->"+",a_/;(a<0)->"-"}],xinit=-xinit],
Manipulator[Dynamic[Abs[xinit],(xinit=If[xinit!=0,Sign[xinit]#,#])&],{0,rInitRange},Appearance->{"Labeled"}]},
{Text["\!\(\*SubscriptBox[\(z\), \(init\)]\) "],Button[Dynamic[zinit/.{a_/;(a>=0)->"+",a_/;(a<0)->"-"}],zinit=-zinit],
Manipulator[Dynamic[Abs[zinit],(zinit=If[zinit!=0,Sign[zinit]#,#])&],{0,rInitRange},Appearance->{"Labeled"}]}
}]


dashboardPlotter[{F_,\[Omega]_},\[Kappa]_,initialpath_: {"t\[Kappa]","t0","T"},{poinit_:0.15,ppinit_:0.15}]:=With[
{ARMSupportString=Import[NotebookDirectory[]<>"ARMSupport.m","Text"],EPToolboxString=Import[NotebookDirectory[]<>"EPToolbox.m","Text"]},
DynamicModule[
{po=poinit,pp=ppinit,py=0,sMan=0.1,t,rules
,trajectory
,expr,labels
,path,barepath=initialpath,\[CapitalDelta]path=Table[0,{Length[initialpath]}]
,tss,baretss,\[CapitalDelta]tss=0
,tCAset,showtCAs=False
,pomax=1.,ppmax=1.5
,xinit=0,zinit=0,rInitRange=0.15
,r2range={{All,All},{All,All}},r2FullRange=All,r2plot
,tRangeSymbolic={{All,All},{All,All}},tRangeNumeric
,updateDefinitions
},
updateDefinitions[]:=(
baretss=ts[{po,py,pp},{F,\[Omega],\[Kappa]}];
tss=baretss+\[CapitalDelta]tss;
rules:={"t\[Kappa]"->tss-I/\[Kappa]^2,"ts"->tss,"t0"->Re[tss],"\[Tau]"->Im[tss],"T"-> 2\[Pi]/\[Omega],"tCAset"->tCAset};
tRangeNumeric=(({{
If[#[[1,1]]===All,"t0"-10,#[[1,1]]],If[#[[1,2]]===All,Re[Last[path]]+10,#[[1,2]]]
},{
If[#[[2,1]]===All,-10,#[[2,1]]],If[#[[2,2]]===All,Max[Im[tss]+10,15],#[[2,2]]]
}}&[tRangeSymbolic])/.rules);
tCAset=If[TrueQ[showtCAs],
(*Print["calculating tCAs"];(tCA/.allQuantumClosestApproachTimes[{po,0,pp},{F,\[Omega],\[Kappa]},{xinit,0,zinit},"Range"\[Rule]Complex@@@Transpose[tRangeNumeric]])*)
,{}];
path=Evaluate[barepath/.rules]+\[CapitalDelta]path;
t=Interpolation[Evaluate[{Range[0,1,1/(Length[path]-1)],path}\[Transpose]],InterpolationOrder->1];
trajectory:=Function[t,complexTrajectory[t,{po,py,pp}, {F,\[Omega],\[Kappa]},rInit->{xinit,0,zinit},forcets->tss]];
);
Dynamic[updateDefinitions[];""]

Framed[Grid[
{{(*Top row: controllers.*)
contourProgressController[sMan],
tsController[\[CapitalDelta]tss,baretss,tss,{F,\[Omega],\[Kappa]}],
rInitController[xinit,zinit,rInitRange]
},{(*Middle row*)
Dynamic[trajectoryPlotter[trajectory[t[#]][[1]]&,"\!\(\*SubscriptBox[\(x\), \(cl\)]\)(t)",sMan,"PlotRange"->All,ImageSize->$smallBlockSize]],
Dynamic[trajectoryPlotter[trajectory[t[#]][[3]]&,"\!\(\*SubscriptBox[\(z\), \(cl\)]\)(t)",sMan,"PlotRange"->All,ImageSize->$smallBlockSize]],
Dynamic[timeIntegrandPlotter[Total[trajectory[t[#]]^2]&,t,ImageSize->$largeBlockSize]]
},{(*Bottom row*)
(*Momentum plane / ionization probability*)
momentumPlaneControls[{po,py,pp},{F,\[Omega],\[Kappa]},{pomax,ppmax}]
,(*r^2 plane - trajectory*)
Column[{
Dynamic[
trajectoryPlotter[Total[trajectory[t[#]]^2]&,"\!\(\*SubscriptBox[\(r\), \(cl\)]\)(t\!\(\*SuperscriptBox[\()\), \(2\)]\)",sMan,"PlotRange"->r2range,ImageSize->$smallBlockSize]
]
,(*r^2 plane range controls*)
rangeReset[r2range,{"Re(\!\(\*SuperscriptBox[\(r\), \(2\)]\))","Im(\!\(\*SuperscriptBox[\(r\), \(2\)]\))"}]
},Center]
,(*time plane - path chooser.*)
Column[{
LocatorPane[
Dynamic[
Join[(*{Re[path],Im[path]}\[Transpose]*){Re[#],Im[#]}&/@path,{{Re[tss],Im[tss]}}],
Function[points,
(\[CapitalDelta]path=(Complex@@@Most[points])-Evaluate[barepath/.rules]);
(\[CapitalDelta]tss=Complex@@Last[points]-baretss);
updateDefinitions[]
,HoldRest]
],
Dynamic[
Show[
timeContours[Total[trajectory[#]^2]&,rules,tss,path,tRangeNumeric,ImageSize->$largeBlockSize],
timePathPlotter[rules,t,sMan]
]
]
]
,(*Time plane range controls*)
rangeReset[tRangeSymbolic,{"Re(t)","Im(t)"}]
},Center]
}}
,Spacings->0
]]
,SaveDefinitions->True
,Initialization:>(
(*Needs["EPToolbox`",NotebookDirectory[]<>"EPToolbox.m"];
Needs["ARMSupport`",NotebookDirectory[]<>"ARMSupport.m"];*)
{Get[#]&[StringToStream[ARMSupportString]],Get[#]&[StringToStream[EPToolboxString]]}
)
]
]


End[]
EndPackage[]
